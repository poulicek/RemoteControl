<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>